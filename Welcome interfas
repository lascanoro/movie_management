import os
import pandas as pd

# Definir la ruta completa a la carpeta de los archivos
base_path = "C:/Users/patri/Desktop/Phython/piton clonasion/movie_management/movie_management/"

# Imprimir el directorio actual
print("Current directory:", os.getcwd())

#--------------------------EN ESTE BLOQUE ORDENAMOS LOS DATA FRAMES------------------

# Cargar datos de usuarios y películas usando rutas completas
df_users = pd.read_csv(base_path + 'users.csv')
df_movies = pd.read_csv(base_path + 'movies.csv')

# Crear el DataFrame de registros de préstamo y guardarlo con la ruta completa
df_borrowing_records = pd.DataFrame(columns=['user id', 'movie ids', 'borrow_date'])
df_borrowing_records.to_csv(base_path + 'borrowing_records.csv', index=False)

# Agregar la columna de descripción a df_movies
df_movies['description'] = None

# Diccionario con descripciones de películas
movie_descriptions = {
    101: "A thief who enters people's dreams to steal secrets must pull off his toughest mission yet: planting an idea in someone's subconscious.",
    102: "A computer hacker discovers reality is a simulated world, and joins a rebellion to free humanity from its machine overlords.",
    103: "A group of astronauts embarks on a journey through a wormhole to find a new home for humanity as Earth faces extinction.",
    104: "A poor family schemes to infiltrate a wealthy household, leading to unexpected and dark consequences.",
    105: "The aging patriarch of a powerful crime family hands control to his reluctant son, sparking a violent struggle for power.",
    106: "The lives of two hitmen, a boxer, a gangster, and his wife intertwine through a series of violent and darkly humorous events.",
    107: "Batman faces his greatest challenge yet as he battles the Joker, a criminal mastermind who seeks to create chaos in Gotham City.",
    108: "An insomniac office worker forms an underground fight club with a charismatic soap salesman, leading to an anarchic movement that challenges consumerism.",
    109: "Forrest Gump, a slow-witted but kind-hearted man, unwittingly influences several historical events while navigating life and love in America.",
    110: "Oskar Schindler, a German businessman, saves the lives of over a thousand Jewish refugees during the Holocaust by employing them in his factories."
}

# Llenar la columna 'description' con información del diccionario de descripciones
df_movies['description'] = df_movies['Movie ID'].map(movie_descriptions)
df_movies.to_csv(base_path + 'movies.csv', index=False)

#-------------------------FUNCIONES QUE VAMOS A UTILIZAR MAS ABAJO------------

# Función de bienvenida
def welcome_user(df_users):
    print("Welcome to the movie management system")
    print("Please, pick one option from the following menu:")
    print("1. Enter your user ID")
    print("2. See all users")

# Función para el menú principal del usuario
def user_menu(user_name):
    print(f"{user_name}, please pick one option from the following menu (1, 2, or 3):")
    print("1. Rent")
    print("2. Return")
    print("3. Administrator")

# Función para el menú de administrador
def admin_menu():
    print("Welcome to the Administrator menu. Please pick one option:")
    print("1. Add or remove movies")
    print("2. Check available copies")
    print("3. Add or delete users")

# Función para agregar o eliminar películas
def add_or_remove_movies():
    global df_movies
    action_movies = input("Do you want to add or delete a movie? (add/delete): ").strip().lower()

    if action_movies == "add":
        movie_id = int(input("Enter the movie ID (must be a number above 100): "))
        title = input("Enter the title of the movie: ")
        director = input("Enter the name of the director: ")
        year = input("Enter the year the movie was released: ")
        available_copies = int(input("Enter the number of available copies: "))
        description = input("Enter the description of the movie: ")

        if movie_id in df_movies['Movie ID'].values:
            print(f"The movie with ID {movie_id} already exists and cannot be added.")
        else:
            new_movie = pd.DataFrame({
                'Movie ID': [movie_id],
                'Title': [title],
                'Director': [director],
                'Year': [year],
                'Available Copies': [available_copies],
                'description': [description]
            })
            df_movies = pd.concat([df_movies, new_movie], ignore_index=True)
            print(f"The new movie '{title}' has been added.")
    elif action_movies == "delete":
        movie_id_delete = int(input("Enter the ID of the movie to delete: "))
        if movie_id_delete in df_movies['Movie ID'].values:
            df_movies = df_movies[df_movies['Movie ID'] != movie_id_delete]
            print(f"The movie with ID {movie_id_delete} has been deleted.")
        else:
            print(f"No movie found with ID {movie_id_delete}.")
    else:
        print("Invalid action. Please select 'add' or 'delete'.")

    df_movies.to_csv(base_path + 'movies.csv', index=False)

# Función para ver el número de copias disponibles de una película
def view_available_copies():
    movie_id_copies = int(input("Enter the movie ID to see the number of available copies: "))
    movie_row = df_movies[df_movies['Movie ID'] == movie_id_copies]
    if not movie_row.empty:
        available_copies = movie_row['Available Copies'].values[0]
        print(f"The movie with ID {movie_id_copies} has {available_copies} available copies.")
    else:
        print(f"No movie was found with ID {movie_id_copies}.")

# Función para agregar o eliminar usuarios
def add_or_create_new_users():
    global df_users
    action_user = input("Do you want to add or delete a user? (add/delete): ").strip().lower()

    if action_user == "add":
        user_id = int(input("Enter the ID of the new user: "))
        user_name = input("Enter the name of the new user: ")

        if user_id in df_users['User ID'].values:
            print(f"The user with ID {user_id} already exists and cannot be added.")
        else:
            new_user = pd.DataFrame({
                'User ID': [user_id],
                'User Name': [user_name]
            })
            df_users = pd.concat([df_users, new_user], ignore_index=True)
            print(f"The new user '{user_name}' has been added.")
    elif action_user == "delete":
        user_id_delete = int(input("Enter the ID of the user to delete: "))
        if user_id_delete in df_users['User ID'].values:
            df_users = df_users[df_users['User ID'] != user_id_delete]
            print(f"The user with ID {user_id_delete} has been deleted.")
        else:
            print(f"No user found with ID {user_id_delete}.")
    else:
        print("Invalid action. Please select 'add' or 'delete'.")

    df_users.to_csv(base_path + 'users.csv', index=False)

#--------------------INICIO DEL PROGRAMA-------------------------
welcome_user(df_users)

user_welcome_menu = input("Please enter your choice: ")
if user_welcome_menu == '1':
    user_id = int(input("Please enter your User ID: "))
    user_row = df_users[df_users['User ID'] == user_id]
    
    if not user_row.empty:
        user_name = user_row['User Name'].values[0]
        print(f"Welcome {user_name}! You are now in the main menu.")
        user_menu(user_name)
        
        user_choice = input("Please enter your choice: ")

        if user_choice == '1':
            print("The Rent option is under construction.")
        elif user_choice == '2':
            return_movie()
            from return_movie import return_movie
        elif user_choice == '3':
            while True:
                password_admin = input("Please enter the administrator password: ")
                if password_admin == "group4":
                    admin_menu()
                    admin_choice = input("Please choose an option: ")
                    if admin_choice == '1':
                        add_or_remove_movies()
                    elif admin_choice == '2':
                        view_available_copies()
                    elif admin_choice == '3':
                        add_or_create_new_users()
                    break
                else:
                    print("Incorrect password, please try again.")
        else:
            print("Invalid option. Please select 1, 2, or 3.")
    else:
        print(f"No user found with User ID: {user_id}")

elif user_welcome_menu == '2':
    print("Here are all users:")
    print(df_users)
else:
    print("Invalid option. Please choose 1 or 2.")
